{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 14,
  "links": [],
  "panels": [
    {
      "datasource": {
        "default": true,
        "type": "grafana-postgresql-datasource",
        "uid": "bdz3m3xs99p1cf"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "forecast"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "forecast"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "allData": {},
        "config": {},
        "data": [],
        "imgFormat": "png",
        "layout": {
          "font": {
            "family": "Inter, Helvetica, Arial, sans-serif"
          },
          "margin": {
            "b": 0,
            "l": 0,
            "r": 0,
            "t": 0
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plog_bgcolor": "rgba(0, 0, 0, 0)",
          "title": {
            "automargin": true
          },
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "date"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true
          }
        },
        "onclick": "",
        "resScale": 2,
        "script": "forecast = variables.forecast.current.value\nmetric = variables.metric.current.value\ngrid = variables.grid.current.value\nregion = variables.region.current.value\nlead = variables.lead.current.value\ntime_grouping = variables.time_grouping.current.value\ntime =  variables.time_filter.current.value\n\nif (time == 'None') {\n  time = '';\n} else {\n  time = '_' + time;\n}\n\ntry {\n  var xmlHttp = new XMLHttpRequest();\n  url = `https://terracotta.sheerwater.rhizaresearch.org/metadata/grouped_metric_2022-12-31_${forecast}_${grid}_${lead}_lsm_${metric}_${region}_True_2016-01-01_${time_grouping}_era5_tmp2m${time}`\n  xmlHttp.open( \"GET\", url, false ); // false for synchronous request\n  xmlHttp.send( null );\n\n  if(xmlHttp.status != 200) {\n    console.log(\"Error getting dataset metadata\");\n    return {};\n  }\n\n  console.log(\"Dataset exists\");\n} catch (error) {\n  // If we can't get this metric just return early\n  console.log(\"Error getting dataset metadata\");\n  console.log(error)\n  return {}\n}\n\n// For each forecast get the metadata so that we can construct a color bar\nif (variables.standardize_forecast_colors.current.value == \"true\") {\n  forecasts = variables.forecast.options.map((x) => x.value)\n} else {\n  forecasts = [forecast]\n}\n\n// For each forecast get the metadata so that we can construct a color bar\nif (variables.standardize_lead_colors.current.value == \"true\") {\n  leads = variables.lead.options.map((x) => x.value)\n} else {\n  leads = [lead]\n}\n\n\ncolor_min = 1e8\ncolor_max = 0\nforecasts.forEach(function(i) {\n  leads.forEach(function(j) {\n    try {\n      var xmlHttp = new XMLHttpRequest();\n      url = `https://terracotta.sheerwater.rhizaresearch.org/metadata/grouped_metric_2022-12-31_${i}_${grid}_${j}_lsm_${metric}_${region}_True_2016-01-01_${time_grouping}_era5_tmp2m${time}`\n      xmlHttp.open( \"GET\", url, false ); // false for synchronous request\n      xmlHttp.send( null );\n\n      f = JSON.parse(xmlHttp.responseText).percentiles[4]\n      if (f < color_min) {\n        color_min = f\n      }\n\n      nf = JSON.parse(xmlHttp.responseText).percentiles[94]\n      if (nf > color_max) {\n        color_max = nf\n      }\n    } catch (error) {\n   \n    }\n    \n  });\n});\n\nconsole.log(color_min)\nconsole.log(color_max)\n\nif (variables.metric.current.value == 'bias' ) {\n  if(Math.abs(color_min) > color_max) {\n    color_max = Math.abs(color_min)\n  } else {\n    color_min = color_max*-1\n  }\n  console.log(color_min)\n  console.log(color_max)\n  tera_cscale='rdbu_r'\n} else if (variables.metric.current.value == 'acc' ){\n  color_min = -1\n  color_max = 1\n  tera_cscale = 'rdbu'\n} else {\n  // set the terracotta colorscale\n  tera_cscale = 'reds'\n}\nstretch = `colormap=${tera_cscale}&stretch_range=[${color_min},${color_max}]`\n\n//Query the color scale\nvar xmlHttp = new XMLHttpRequest();\nurl = `https://terracotta.sheerwater.rhizaresearch.org/colormap?colormap=${tera_cscale}&stretch_range=[${color_min},${color_max}]&num_values=10`\nxmlHttp.open( \"GET\", url, false ); // false for synchronous request\nxmlHttp.send( null );\n\nf = JSON.parse(xmlHttp.responseText)\ncscale = []\nfor(var i = 0; i < f.colormap.length; i++) {\n  rgb = `rgb(${f.colormap[i].rgba[0]},${f.colormap[i].rgba[1]},${f.colormap[i].rgba[2]})`\n  cscale.push([i/f.colormap.length + i*(.1/(f.colormap.length-1)), rgb])\n}\n\nstretch = `colormap=${tera_cscale}&stretch_range=[${color_min},${color_max}]`\n\n\nreturn {\n  data: [{\n    type: 'scattermap',\n    lat: ['45.5017', '46.9027'],\n    lon: ['-73.5673', '-73.5673'],\n    mode: 'markers',\n    marker: {\n      size: 0,\n      showscale: true,\n      colorscale: cscale,\n      cmin: color_min,\n      cmax: color_max,\n      colorbar: {\n        tickmode: 'auto'\n      }\n    },\n  }],\n  layout: \n  {\n    dragmode: 'zoom',\n    map: {\n      style: 'open-street-map',\n      layers: [\n        {\n          opacity: 0.7,\n          sourcetype: \"raster\",\n          source: [\n            `https://terracotta.sheerwater.rhizaresearch.org/singleband/grouped_metric_2022-12-31_${forecast}_${grid}_${lead}_lsm_${metric}_${region}_True_2016-01-01_${time_grouping}_era5_tmp2m${time}/{z}/{x}/{y}.png?${stretch}`\n          ],\n          below: \"traces\",\n        },\n      ],\n      center: {lat: 0, lon: 0}, \n      zoom: 1,\n    },\n    margin: {r: 0, t: 0, b: 0, l: 0},\n    showlegend: false,\n  }\n}\n  ",
        "syncTimeRange": false,
        "timeCol": ""
      },
      "pluginVersion": "1.8.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "bdz3m3xs99p1cf"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select * from (values ('${forecast}${standardize_lead_colors}${standardize_forecast_colors}${time_grouping}${time_filter}') ) v(t)",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Temperature (2m) Results (C)",
      "transparent": true,
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "default": true,
        "type": "grafana-postgresql-datasource",
        "uid": "bdz3m3xs99p1cf"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "forecast"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "forecast"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 5,
      "options": {
        "allData": {},
        "config": {},
        "data": [],
        "imgFormat": "png",
        "layout": {
          "font": {
            "family": "Inter, Helvetica, Arial, sans-serif"
          },
          "margin": {
            "b": 0,
            "l": 0,
            "r": 0,
            "t": 0
          },
          "paper_bgcolor": "rgba(0, 0, 0, 0)",
          "plog_bgcolor": "rgba(0, 0, 0, 0)",
          "title": {
            "automargin": true
          },
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "date"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true
          }
        },
        "onclick": "",
        "resScale": 2,
        "script": "forecast = variables.forecast.current.value\nmetric = variables.metric.current.value\ngrid = variables.grid.current.value\nregion = variables.region.current.value\nlead = variables.lead.current.value\ntime_grouping = variables.time_grouping.current.value\ntime =  variables.time_filter.current.value\n\n\nif (time == 'None') {\n  time = '';\n} else {\n  time = '_' + time;\n}\n\ntry {\n  var xmlHttp = new XMLHttpRequest();\n  url = `https://terracotta.sheerwater.rhizaresearch.org/metadata/grouped_metric_2022-12-31_${forecast}_${grid}_${lead}_lsm_${metric}_${region}_True_2016-01-01_${time_grouping}_era5_precip${time}`\n  xmlHttp.open( \"GET\", url, false ); // false for synchronous request\n  xmlHttp.send( null );\n\n  if(xmlHttp.status != 200) {\n    console.log(\"Error getting dataset metadata\");\n    return {};\n  }\n\n  console.log(\"Dataset exists\");\n} catch (error) {\n  // If we can't get this metric just return early\n  console.log(\"Error getting dataset metadata\");\n  console.log(error)\n  return {}\n}\n\n// For each forecast get the metadata so that we can construct a color bar\nif (variables.standardize_forecast_colors.current.value == \"true\") {\n  forecasts = variables.forecast.options.map((x) => x.value)\n} else {\n  forecasts = [forecast]\n}\n\n// For each forecast get the metadata so that we can construct a color bar\nif (variables.standardize_lead_colors.current.value == \"true\") {\n  leads = variables.lead.options.map((x) => x.value)\n} else {\n  leads = [lead]\n}\n\n\ncolor_min = 1e8\ncolor_max = 0\nforecasts.forEach(function(i) {\n  leads.forEach(function(j) {\n    try {\n      var xmlHttp = new XMLHttpRequest();\n      url = `https://terracotta.sheerwater.rhizaresearch.org/metadata/grouped_metric_2022-12-31_${i}_${grid}_${j}_lsm_${metric}_${region}_True_2016-01-01_${time_grouping}_era5_precip${time}`\n      xmlHttp.open( \"GET\", url, false ); // false for synchronous request\n      xmlHttp.send( null );\n\n      f = JSON.parse(xmlHttp.responseText)\n      console.log(f);\n\n      f = JSON.parse(xmlHttp.responseText).percentiles[4]\n      if (f < color_min) {\n        color_min = f\n      }\n\n      nf = JSON.parse(xmlHttp.responseText).percentiles[94]\n      if (nf > color_max) {\n        color_max = nf\n      }\n    } catch (error) {\n\n    }\n    \n  });\n});\n\nconsole.log(color_min)\nconsole.log(color_max)\n\nif (variables.metric.current.value == 'bias' ) {\n  if(Math.abs(color_min) > color_max) {\n    color_max = Math.abs(color_min)\n  } else {\n    color_min = color_max*-1\n  }\n  console.log(color_min)\n  console.log(color_max)\n  tera_cscale='brbg'\n} else if (variables.metric.current.value == 'acc' ){\n  color_min = -1\n  color_max = 1\n  tera_cscale = 'rdbu'\n} else {\n  // set the terracotta colorscale\n  tera_cscale = 'reds'\n}\nstretch = `colormap=${tera_cscale}&stretch_range=[${color_min},${color_max}]`\n\n//Query the color scale\nvar xmlHttp = new XMLHttpRequest();\nurl = `https://terracotta.sheerwater.rhizaresearch.org/colormap?colormap=${tera_cscale}&stretch_range=[${color_min},${color_max}]&num_values=10`\nxmlHttp.open( \"GET\", url, false ); // false for synchronous request\nxmlHttp.send( null );\n\nf = JSON.parse(xmlHttp.responseText)\ncscale = []\nfor(var i = 0; i < f.colormap.length; i++) {\n  rgb = `rgb(${f.colormap[i].rgba[0]},${f.colormap[i].rgba[1]},${f.colormap[i].rgba[2]})`\n  cscale.push([i/f.colormap.length + i*(.1/(f.colormap.length-1)), rgb])\n}\n\nconsole.log(cscale)\n\nreturn {\n  data: [{\n    type: 'scattermap',\n    lat: ['45.5017', '46.9027'],\n    lon: ['-73.5673', '-73.5673'],\n    mode: 'markers',\n    marker: {\n      size: 0,\n      showscale: true,\n      colorscale: cscale,\n      cmin: color_min,\n      cmax: color_max\n    }\n  }],\n  layout: \n  {\n    dragmode: 'zoom',\n    map: {\n      style: 'open-street-map',\n      layers: [\n        {\n          opacity: 0.7,\n          sourcetype: \"raster\",\n          source: [\n            `https://terracotta.sheerwater.rhizaresearch.org/singleband/grouped_metric_2022-12-31_${forecast}_${grid}_${lead}_lsm_${metric}_${region}_True_2016-01-01_${time_grouping}_era5_precip${time}/{z}/{x}/{y}.png?${stretch}`\n          ],\n          below: \"traces\",\n        },\n      ],\n      center: {lat: 0, lon: 0}, \n      zoom: 1\n    },\n    margin: {r: 0, t: 0, b: 0, l: 0},\n    showlegend: false,\n  }\n}\n  ",
        "syncTimeRange": false,
        "timeCol": ""
      },
      "pluginVersion": "1.8.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "bdz3m3xs99p1cf"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select * from (values ('${forecast}${standardize_lead_colors}${standardize_forecast_colors}${time_grouping}${time_filter}') ) v(t)",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Precip Result (mm)",
      "transparent": true,
      "type": "nline-plotlyjs-panel"
    }
  ],
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "ECMWF IFS ER",
          "value": "ecmwf_ifs_er"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Forecast",
        "multi": false,
        "name": "forecast",
        "options": [
          {
            "selected": false,
            "text": "Salient",
            "value": "salient"
          },
          {
            "selected": true,
            "text": "ECMWF IFS ER",
            "value": "ecmwf_ifs_er"
          },
          {
            "selected": false,
            "text": "ECMWF IFS ER Debiased",
            "value": "ecmwf_ifs_er_debiased"
          },
          {
            "selected": false,
            "text": "Clim 1985-2015",
            "value": "climatology_2015"
          },
          {
            "selected": false,
            "text": "Clim + Trend",
            "value": "climatology_trend_2015"
          },
          {
            "selected": false,
            "text": "Clim Rolling",
            "value": "climatology_rolling"
          }
        ],
        "query": "Salient : salient, ECMWF IFS ER : ecmwf_ifs_er, ECMWF IFS ER Debiased : ecmwf_ifs_er_debiased, Clim 1985-2015 : climatology_2015, Clim + Trend : climatology_trend_2015, Clim Rolling : climatology_rolling",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "MAE",
          "value": "mae"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Metric",
        "multi": false,
        "name": "metric",
        "options": [
          {
            "selected": true,
            "text": "MAE",
            "value": "mae"
          },
          {
            "selected": false,
            "text": "CRPS",
            "value": "crps"
          },
          {
            "selected": false,
            "text": "ACC",
            "value": "acc"
          },
          {
            "selected": false,
            "text": "RMSE",
            "value": "rmse"
          },
          {
            "selected": false,
            "text": "Bias",
            "value": "bias"
          }
        ],
        "query": "MAE : mae, CRPS : crps, ACC : acc, RMSE : rmse, Bias : bias",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "Week 6",
          "value": "week6"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Lead",
        "multi": false,
        "name": "lead",
        "options": [
          {
            "selected": false,
            "text": "Week 1",
            "value": "week1"
          },
          {
            "selected": false,
            "text": "Week 2",
            "value": "week2"
          },
          {
            "selected": false,
            "text": "Week 3",
            "value": "week3"
          },
          {
            "selected": false,
            "text": "Week 4",
            "value": "week4"
          },
          {
            "selected": false,
            "text": "Week 5",
            "value": "week5"
          },
          {
            "selected": true,
            "text": "Week 6",
            "value": "week6"
          }
        ],
        "query": "Week 1 : week1, Week 2 : week2, Week 3 : week3, Week 4 : week4, Week 5 : week5, Week 6 : week6",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "ERA5",
          "value": "era5"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Ground Truth",
        "multi": false,
        "name": "truth",
        "options": [
          {
            "selected": true,
            "text": "ERA5",
            "value": "era5"
          }
        ],
        "query": "ERA5 : era5",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "1.5",
          "value": "global1_5"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Grid",
        "multi": false,
        "name": "grid",
        "options": [
          {
            "selected": true,
            "text": "1.5",
            "value": "global1_5"
          },
          {
            "selected": false,
            "text": "0.25",
            "value": "global0_25"
          }
        ],
        "query": "1.5 : global1_5, 0.25 : global0_25",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "Africa",
          "value": "africa"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Region",
        "multi": false,
        "name": "region",
        "options": [
          {
            "selected": true,
            "text": "Africa",
            "value": "africa"
          },
          {
            "selected": false,
            "text": "East Africa",
            "value": "east_africa"
          },
          {
            "selected": false,
            "text": "Global",
            "value": "global"
          },
          {
            "selected": false,
            "text": "CONUS",
            "value": "conus"
          }
        ],
        "query": "Africa : africa, East Africa : east_africa, Global : global, CONUS : conus",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "None",
          "value": "None"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Time Grouping",
        "multi": false,
        "name": "time_grouping",
        "options": [
          {
            "selected": true,
            "text": "None",
            "value": "None"
          },
          {
            "selected": false,
            "text": "Month of Year",
            "value": "month_of_year"
          },
          {
            "selected": false,
            "text": "Year",
            "value": "year"
          }
        ],
        "query": "None : None, Month of Year : month_of_year, Year : year",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "select v.* from (values ('None')) v(t)",
          "value": "select v.* from (values ('None')) v(t)"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select \nCASE\n    WHEN v.g = 'None' THEN 'select v.* from (values (''None'')) v(t)'\n    ELSE 'select distinct time from \"${precip_tab_name}\"'\nEND\nfrom (values ('$time_grouping')) v(g)",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "time_filter_filter_query",
        "options": [],
        "query": "select \nCASE\n    WHEN v.g = 'None' THEN 'select v.* from (values (''None'')) v(t)'\n    ELSE 'select distinct time from \"${precip_tab_name}\"'\nEND\nfrom (values ('$time_grouping')) v(g)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "None",
          "value": "None"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "${time_filter_filter_query:raw}",
        "hide": 0,
        "includeAll": false,
        "label": "Time Filter",
        "multi": false,
        "name": "time_filter",
        "options": [],
        "query": "${time_filter_filter_query:raw}",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 3,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select \nCASE\n    WHEN v.g = 'None' THEN ''\n    ELSE 'where time = ' || v.t\nEND\nfrom (values ('$time_filter', '$time_grouping')) v(t, g)",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "time_filter_query",
        "options": [],
        "query": "select \nCASE\n    WHEN v.g = 'None' THEN ''\n    ELSE 'where time = ' || v.t\nEND\nfrom (values ('$time_filter', '$time_grouping')) v(t, g)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "7928d9fd350a9cd889fa8bbedf885539",
          "value": "7928d9fd350a9cd889fa8bbedf885539"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('summary_metrics_table/2022-12-31_${grid}_lsm_${metric}_${region}_2016-01-01_${time_grouping}_${truth}_precip')",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "precip_tab_name",
        "options": [],
        "query": "select * from md5('summary_metrics_table/2022-12-31_${grid}_lsm_${metric}_${region}_2016-01-01_${time_grouping}_${truth}_precip')",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "True",
          "value": "true"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Standardize Forecast Colors",
        "multi": false,
        "name": "standardize_forecast_colors",
        "options": [
          {
            "selected": true,
            "text": "True",
            "value": "true"
          },
          {
            "selected": false,
            "text": "False",
            "value": "false"
          }
        ],
        "query": "True : true, False : false",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "False",
          "value": "false"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Standardize Lead Colors",
        "multi": false,
        "name": "standardize_lead_colors",
        "options": [
          {
            "selected": false,
            "text": "True",
            "value": "true"
          },
          {
            "selected": true,
            "text": "False",
            "value": "false"
          }
        ],
        "query": "True : true, False : false",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "utc",
  "title": "Metrics Maps Copy",
  "uid": "fe4kcud2yws1sd",
  "version": 2,
  "weekStart": ""
}
