{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 21,
  "links": [],
  "panels": [
    {
      "datasource": {
        "default": true,
        "type": "grafana-postgresql-datasource",
        "uid": "bdz3m3xs99p1cf"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "forecast"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "forecast"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 23,
        "x": 0,
        "y": 0
      },
      "id": 11,
      "options": {
        "allData": {},
        "config": {},
        "data": [],
        "imgFormat": "png",
        "layout": {
          "font": {
            "family": "Inter, sans-serif"
          },
          "margin": {
            "b": 4,
            "l": 0,
            "r": 0,
            "t": 0
          },
          "paper_bgcolor": "#F4F5F5",
          "plog_bgcolor": "#F4F5F5",
          "title": {
            "automargin": true
          },
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "date"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true
          }
        },
        "onclick": "",
        "resScale": 2,
        "script": "// Utility function to convert hex color to an RGB object\nfunction hexToRgb(hex) {\n    const bigint = parseInt(hex.slice(1), 16);\n    return {\n        r: (bigint >> 16) & 255,\n        g: (bigint >> 8) & 255,\n        b: bigint & 255\n    };\n}\n\n// Function to get interpolated color by passing a value from 0 to 1\nfunction getColor(value, cmin, cmax, colorMap) {\n    let colors;\n\n    // Define color scales based on the selected colormap\n    if (colorMap === 'BrBG') {\n        colors = [\n            \"#543005\",\n            \"#8C510A\", \"#BF812D\", \"#DFC27D\", \"#F6E8C3\",\n            \"#F5F5F5\", \"#C7EAE5\", \"#80CDC1\", \"#35978F\", \"#01665E\",\n            \"#003C30\"\n        ];\n    } else if (colorMap === 'balance') {\n        colors = [\n            \"#2a0a0a\",\n            \"#751b1b\", \"#b73c3c\", \"#e88484\", \"#f3c3c3\", // Negative side\n            \"#ffffff\",                                    // Neutral middle\n            \"#c3e4f3\", \"#84c2e8\", \"#3c9fb7\", \"#1b5e75\",  // Positive side\n            \"#0a2a2a\"\n        ];\n        colors = colors.reverse();\n    } else if (colorMap === 'RdBu') {\n        colors = ['#ff0000', '#ffffff', '#0000ff'];\n    } else {\n        throw new Error(\"Invalid colorMap. Choose 'BrBG', 'balance', or 'RdBu'.\");\n    }\n\n    let x;\n    if (value > 0) {\n        x = 0.5 + (value / cmax) * 0.5;  // Map positive values from 0.5 to 1.0\n    } else if (value < 0) {\n        x = 0.5 + (value / (-cmin)) * 0.5;  // Map negative values from 0.0 to 0.5\n    } else {\n        x = 0.5;  // Zero maps to middle\n    }\n\n    // Clamp value between 0 and 1\n    x = Math.min(1, Math.max(0, x));\n    if (isNaN(x)) {\n        return `rgba(255, 255, 255, 0.5)`;\n    }\n\n    // Compute exact position in color array\n    const scaledValue = x * (colors.length - 1);\n    const lowerIndex = Math.floor(scaledValue);\n    const upperIndex = Math.ceil(scaledValue);\n\n    // Edge case: if at the end of the array, return the last color\n    if (lowerIndex === upperIndex) {\n        const color = hexToRgb(colors[lowerIndex]);\n        return `rgba(${color.r}, ${color.g}, ${color.b}, 0.5)`;\n    }\n\n    // Interpolate between the two colors\n    const lowerColor = hexToRgb(colors[lowerIndex]);\n    const upperColor = hexToRgb(colors[upperIndex]);\n    const t = scaledValue - lowerIndex;\n\n    // Interpolate RGB channels\n    const r = Math.round(lowerColor.r + t * (upperColor.r - lowerColor.r));\n    const g = Math.round(lowerColor.g + t * (upperColor.g - lowerColor.g));\n    const b = Math.round(lowerColor.b + t * (upperColor.b - lowerColor.b));\n\n    return `rgba(${r}, ${g}, ${b}, 0.5)`;\n}\n\nlet series = data.series[0];\nif (series.length == 0) {\n    return {\n        data: []\n    };\n}\n\nlet forecasts = series.fields[0].values;\nlet values = [];\nlet skills = [];\nlet header = [\"Forecast\"];\nlet orig_header = [\"forecast\"];\nlet max = -Infinity;\nlet min = Infinity;\n\nlet skill_baseline_idx = null;\nfor (let i = 0; i < forecasts.length; i++) {\n    if (variables.baseline.current.value == forecasts[i]) {\n        skill_baseline_idx = i;\n    }\n}\n\nlet baseline_values = [];\nfor (let i = 1; i < series.fields.length; i++) {\n    baseline_values.push(series.fields[i].values[skill_baseline_idx]);\n}\n\nfor (let i = 1; i < series.fields.length; i++) {\n    let v = series.fields[i].values;\n    let skill_values = [];\n    for (let j = 0; j < v.length; j++) {\n        let val = parseFloat(v[j]);\n        if (val > max) {\n            max = val;\n        }\n        if (val < min) {\n            min = val;\n        }\n        const baselineVal = baseline_values[(i - 1)];\n        if (isNaN(baselineVal) || baselineVal === 0 || baselineVal == null) {\n            skill_values.push(null);\n        } else {\n            skill_values.push((1 - (val / baselineVal)));\n        }        \n        // skill_values.push((1 - (val / baseline_values[(i - 2 - idx)])));\n    }\n    values.push(v);\n    skills.push(skill_values);\n    header.push(\"Week \" + (i));\n    orig_header.push(\"week\" + (i));\n}\nconsole.log(forecasts);\n\n// Round to two decimal places\nvalues = values.map((week) => week.map((x) => x ? x.toFixed(2) : '-'));\nforecasts = forecasts.map((forecast) => \n    forecast.replace(/_/g, ' ')\n           .split(' ')\n           .map((word) => word[0].toUpperCase() + word.substring(1))\n           .join(' ')\n);\nvalues.unshift(forecasts);\n\n\n// Define a dictionary for custom renaming\nconst renameDict = {\n    \"Ecmwf Ifs Er\": \"ECMWF IFS ER\",\n    \"Ecmwf Ifs Er Debiased\": \"ECMWF IFS ER Debiased\",\n    \"Salient\": \"Salient\",\n    \"Fuxi\": \"FuXi S2S\"\n};\n\n// Apply custom renaming to the first column\nvalues[0] = values[0].map(value => renameDict[value] || value);\n\n// Assign the forecast colors\nlet forecast_colors = Array(forecasts.length).fill('rgba(0,0,0,0)');\n\n// Assign the skill colors\nlet skill_colors = [];\nlet colorMap = 'RdBu';\nlet [cmin, cmax] = [-1, 1];\n\nfor (let i = 0; i < skills.length; i++) {\n    let week_colors = [];\n    for (let j = 0; j < skills[i].length; j++) {\n        let val;\n        val = parseFloat(skills[i][j]);\n        week_colors.push(getColor(val, cmin, cmax, colorMap));\n    }\n    skill_colors.push(week_colors);\n}\n\nreturn {\n    data: [{\n        type: 'table',\n        header: {\n            values: header,\n            align: ['left', 'right', 'right', 'right', 'right', 'right'],\n            line: { width: 0, color: '#DBDDDE' },\n            font: { family: \"Inter, sans-serif\", size: 14, weight: \"bold\" },\n            fill: {\n                color: ['rgba(0,0,0,0)']\n            }\n        },\n        cells: {\n            values: values,\n            align: ['left', 'right', 'right', 'right', 'right', 'right'],\n            line: { width: 1, color: \"#DBDDDE\" },\n            font: { family: \"Inter, sans-serif\", size: 14, color: [\"black\"] },\n            fill: {\n                color: [\n                    forecast_colors,\n                    ...skill_colors\n                ]\n            },\n            height: 35\n        },\n        columnwidth: [1.5, 0.8, 0.8, 0.8, 0.8, 0.8]\n    }]\n};",
        "syncTimeRange": false,
        "timeCol": ""
      },
      "pluginVersion": "1.8.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "bdz3m3xs99p1cf"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n   forecast,\n   CAST(day1 AS FLOAT) / (24 * 60 * 60) as day1,\n   CAST(day8 AS FLOAT) / (24 * 60 * 60) as day8,\n   CAST(day15 AS FLOAT) / (24 * 60 * 60) as day15,\n   CAST(day20 AS FLOAT) / (24 * 60 * 60) as day20\n   -- CASE WHEN \"$task\" = 'rainy_onset' THEN CAST(day22 AS FLOAT) / (24 * 60 * 60) END as day22,\n   -- CASE WHEN \"$task\" = 'rainy_onset' THEN CAST(day29 AS FLOAT) / (24 * 60 * 60) END as day29,\n   -- CASE WHEN \"$task\" = 'rainy_onset' THEN CAST(day36 AS FLOAT) / (24 * 60 * 60) END as day36\nFROM \"$metrics_tab_name\";\n\n-- SELECT \n--    forecast,\n--    CAST(day1 AS FLOAT) / (24 * 60 * 60) as day1,\n--    CAST(day8 AS FLOAT) / (24 * 60 * 60) as day8,\n--    CAST(day15 AS FLOAT) / (24 * 60 * 60) as day15,\n--    CAST(day22 AS FLOAT) / (24 * 60 * 60) as day22,\n--    CAST(day29 AS FLOAT) / (24 * 60 * 60) as day29,\n--    CAST(day36 AS FLOAT) / (24 * 60 * 60) as day36\n-- FROM \"$metrics_tab_name\";\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "bdz3m3xs99p1cf"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "select '${baseline}'",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "${region} Advisory Error (days)",
      "transparent": true,
      "type": "nline-plotlyjs-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "mae",
          "value": "mae"
        },
        "includeAll": false,
        "label": "Metric",
        "name": "metric",
        "options": [
          {
            "selected": true,
            "text": "MAE",
            "value": "mae"
          },
          {
            "selected": false,
            "text": "Bias",
            "value": "bias"
          }
        ],
        "query": "MAE : mae, Bias : bias, RMSE : rmse",
        "type": "custom"
      },
      {
        "current": {
          "text": "IMERG",
          "value": "imerg"
        },
        "includeAll": false,
        "label": "Ground Truth",
        "name": "truth",
        "options": [
          {
            "selected": false,
            "text": "ERA5",
            "value": "era5"
          },
          {
            "selected": true,
            "text": "IMERG",
            "value": "imerg"
          },
          {
            "selected": false,
            "text": "GHCN",
            "value": "ghcn"
          }
        ],
        "query": "ERA5 : era5, IMERG : imerg, GHCN : ghcn, CHIRPS : chirps, TAHMO : tahmo, Clim. 2004-2015 : ltn",
        "type": "custom"
      },
      {
        "current": {
          "text": "era5",
          "value": "era5"
        },
        "includeAll": false,
        "label": "Compare with",
        "name": "truth2",
        "options": [
          {
            "selected": true,
            "text": "ERA5",
            "value": "era5"
          },
          {
            "selected": false,
            "text": "IMERG",
            "value": "imerg"
          },
          {
            "selected": false,
            "text": "GHCN",
            "value": "ghcn"
          },
          {
            "selected": false,
            "text": "CHIRPS",
            "value": "chirps"
          },
          {
            "selected": false,
            "text": "TAHMO",
            "value": "tahmo"
          },
          {
            "selected": false,
            "text": "LTN",
            "value": "ltn"
          }
        ],
        "query": "ERA5 : era5, IMERG : imerg, GHCN : ghcn, CHIRPS : chirps, TAHMO : tahmo, Clim. 2004-2015 : ltn",
        "type": "custom"
      },
      {
        "current": {
          "text": "False",
          "value": "False"
        },
        "includeAll": false,
        "label": "Compare?",
        "name": "compare",
        "options": [
          {
            "selected": false,
            "text": "True",
            "value": "True"
          },
          {
            "selected": true,
            "text": "False",
            "value": "False"
          }
        ],
        "query": "True,False",
        "type": "custom"
      },
      {
        "current": {
          "text": "1.5",
          "value": "global1_5"
        },
        "hide": 2,
        "includeAll": false,
        "label": "Grid",
        "name": "grid",
        "options": [
          {
            "selected": true,
            "text": "1.5",
            "value": "global1_5"
          },
          {
            "selected": false,
            "text": "0.25",
            "value": "global0_25"
          }
        ],
        "query": "1.5 : global1_5",
        "type": "custom"
      },
      {
        "current": {
          "text": "Kenya",
          "value": "kenya"
        },
        "hide": 2,
        "includeAll": false,
        "label": "Region",
        "name": "region",
        "options": [
          {
            "selected": true,
            "text": "Kenya",
            "value": "kenya"
          }
        ],
        "query": "Kenya : kenya",
        "type": "custom"
      },
      {
        "current": {
          "text": "-1.50",
          "value": "-1.50"
        },
        "hide": 2,
        "includeAll": false,
        "label": "Latitude",
        "name": "lat",
        "options": [
          {
            "selected": true,
            "text": "-1.50",
            "value": "-1.50"
          }
        ],
        "query": "-1.50",
        "type": "custom"
      },
      {
        "current": {
          "text": "37.50",
          "value": "37.50"
        },
        "hide": 2,
        "includeAll": false,
        "label": "Longitude",
        "name": "lon",
        "options": [
          {
            "selected": true,
            "text": "37.50",
            "value": "37.50"
          }
        ],
        "query": "37.50",
        "type": "custom"
      },
      {
        "current": {
          "text": "7d9a68ebaeb9a254823ce591b428820c",
          "value": "7d9a68ebaeb9a254823ce591b428820c"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('summary_metrics_table/2022-12-31_${grid}_lsm_${metric}_${region}_2016-01-01_None_era5_${task}')",
        "hide": 2,
        "includeAll": false,
        "name": "metrics_tab_name",
        "options": [],
        "query": "select * from md5('summary_metrics_table/2022-12-31_${grid}_lsm_${metric}_${region}_2016-01-01_None_era5_${task}')",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "d69995a4c8f167dc37c4657c3e2139c1",
          "value": "d69995a4c8f167dc37c4657c3e2139c1"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('rain_windowed_spw/${grid}_lsm_kenya_${truth}')",
        "hide": 2,
        "includeAll": false,
        "name": "rainfall_tab_name",
        "options": [],
        "query": "select * from md5('rain_windowed_spw/${grid}_lsm_kenya_${truth}')",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "5362bdc9d0bbbeb7a94ea5b92de4657e",
          "value": "5362bdc9d0bbbeb7a94ea5b92de4657e"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('rain_windowed_spw/${grid}_lsm_kenya_${truth2}')",
        "hide": 2,
        "includeAll": false,
        "name": "rainfall2_tab_name",
        "options": [],
        "query": "select * from md5('rain_windowed_spw/${grid}_lsm_kenya_${truth2}')",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "959d6a5d370e100eb0c39426fd0dd35b",
          "value": "959d6a5d370e100eb0c39426fd0dd35b"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('rain_windowed_spw/${grid}_lsm_kenya_ltn')",
        "hide": 2,
        "includeAll": false,
        "name": "ltn_precip_tab_name",
        "options": [],
        "query": "select * from md5('rain_windowed_spw/${grid}_lsm_kenya_ltn')",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "fe86855b7b0437b7665a39a8fbd4eea9",
          "value": "fe86855b7b0437b7665a39a8fbd4eea9"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('ea_rainy_onset_truth/${task_bool}_${grid}_lsm_kenya_ltn')",
        "hide": 2,
        "includeAll": false,
        "name": "ltn_onset_tab_name",
        "options": [],
        "query": "select * from md5('ea_rainy_onset_truth/${task_bool}_${grid}_lsm_kenya_ltn')",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "6b86793ca796d20f8afb5473fe3ae1da",
          "value": "6b86793ca796d20f8afb5473fe3ae1da"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('ea_rainy_onset_truth/global1_5_lsm_kenya_${truth}_${task}')\n",
        "hide": 2,
        "includeAll": false,
        "name": "onset_tab_name",
        "options": [],
        "query": "select * from md5('ea_rainy_onset_truth/global1_5_lsm_kenya_${truth}_${task}')\n",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "65f7accc5e005991b411ff2ffe78babb",
          "value": "65f7accc5e005991b411ff2ffe78babb"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('ea_rainy_onset_forecast/${forecast}_global1_5_lsm_kenya_${task}')\n\n\n",
        "hide": 2,
        "includeAll": false,
        "name": "fcst_onset_tab_name",
        "options": [],
        "query": "select * from md5('ea_rainy_onset_forecast/${forecast}_global1_5_lsm_kenya_${task}')\n\n\n",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "afab2c65fda360b9f5393321bd0bb8cf",
          "value": "afab2c65fda360b9f5393321bd0bb8cf"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "bdz3m3xs99p1cf"
        },
        "definition": "select * from md5('ea_rainy_onset_probabilities/${forecast}_global1_5_lsm_kenya_${task}')",
        "hide": 2,
        "includeAll": false,
        "name": "fcst_onset_prob_tab_name",
        "options": [],
        "query": "select * from md5('ea_rainy_onset_probabilities/${forecast}_global1_5_lsm_kenya_${task}')",
        "refresh": 2,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": [
            "2023"
          ],
          "value": [
            "2023"
          ]
        },
        "hide": 2,
        "includeAll": true,
        "label": "Years",
        "multi": true,
        "name": "years",
        "options": [
          {
            "selected": false,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "2015",
            "value": "2015"
          },
          {
            "selected": false,
            "text": "2016",
            "value": "2016"
          },
          {
            "selected": false,
            "text": "2017",
            "value": "2017"
          },
          {
            "selected": false,
            "text": "2018",
            "value": "2018"
          },
          {
            "selected": false,
            "text": "2019",
            "value": "2019"
          },
          {
            "selected": false,
            "text": "2020",
            "value": "2020"
          },
          {
            "selected": false,
            "text": "2021",
            "value": "2021"
          },
          {
            "selected": false,
            "text": "2022",
            "value": "2022"
          },
          {
            "selected": true,
            "text": "2023",
            "value": "2023"
          }
        ],
        "query": "2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023",
        "type": "custom"
      },
      {
        "current": {
          "text": "2016",
          "value": "2016"
        },
        "includeAll": false,
        "label": "Verify Year",
        "name": "verify_year",
        "options": [
          {
            "selected": true,
            "text": "2016",
            "value": "2016"
          },
          {
            "selected": false,
            "text": "2017",
            "value": "2017"
          },
          {
            "selected": false,
            "text": "2018",
            "value": "2018"
          },
          {
            "selected": false,
            "text": "2019",
            "value": "2019"
          },
          {
            "selected": false,
            "text": "2020",
            "value": "2020"
          },
          {
            "selected": false,
            "text": "2021",
            "value": "2021"
          },
          {
            "selected": false,
            "text": "2022",
            "value": "2022"
          }
        ],
        "query": "2016, 2017, 2018, 2019, 2020, 2021, 2022",
        "type": "custom"
      },
      {
        "current": {
          "text": "ECMWF IFS ER Debiased",
          "value": "ecmwf_ifs_er_debiased"
        },
        "includeAll": false,
        "label": "Forecast",
        "name": "forecast",
        "options": [
          {
            "selected": false,
            "text": "Salient",
            "value": "salient"
          },
          {
            "selected": false,
            "text": "ECMWF IFS ER",
            "value": "ecmwf_ifs_er"
          },
          {
            "selected": true,
            "text": "ECMWF IFS ER Debiased",
            "value": "ecmwf_ifs_er_debiased"
          }
        ],
        "query": "ECMWF IFS ER : ecmwf_ifs_er, ECMWF IFS ER Debiased : ecmwf_ifs_er_debiased, Clim. 2004-2015 : climatology_2015, FuXi : fuxi",
        "type": "custom"
      },
      {
        "current": {
          "text": "ecmwf_ifs_er_debiased",
          "value": "ecmwf_ifs_er_debiased"
        },
        "includeAll": false,
        "label": "Baseline",
        "name": "baseline",
        "options": [
          {
            "selected": false,
            "text": "ECMWF IFS ER",
            "value": "ecmwf_ifs_er"
          },
          {
            "selected": true,
            "text": "ECMWF IFS ER Debiased",
            "value": "ecmwf_ifs_er_debiased"
          },
          {
            "selected": false,
            "text": "LTN",
            "value": "climatology_2015"
          },
          {
            "selected": false,
            "text": "FuXi",
            "value": "fuxi"
          }
        ],
        "query": "ECMWF IFS ER : ecmwf_ifs_er, ECMWF IFS ER Debiased : ecmwf_ifs_er_debiased, Clim. 2004-2015 : climatology_2015, FuXi : fuxi",
        "type": "custom"
      },
      {
        "current": {
          "text": "rainy_onset",
          "value": "rainy_onset"
        },
        "includeAll": false,
        "label": "Task",
        "name": "task",
        "options": [
          {
            "selected": true,
            "text": "Rainy Onset",
            "value": "rainy_onset"
          },
          {
            "selected": false,
            "text": "Rainy Onset w/o Drought",
            "value": "rainy_onset_no_drought"
          }
        ],
        "query": "Rainy Onset : rainy_onset,Rainy Onset w/o Drought : rainy_onset_no_drought, Pesticide Application : pesticide_date",
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "utc",
  "title": "Prise Pesticide Application Date",
  "uid": "cecvod6ko42yob",
  "version": 3,
  "weekStart": ""
}
