#!/usr/bin/env python3
from grafana_foundation_sdk.builders.dashboard import Dashboard, Panel, AnnotationQuery, TimePicker
from grafana_foundation_sdk.models.dashboard import (
    DataSourceRef,
    GridPos,
    FieldConfigSource,
    FieldConfig,
    FieldColor,
    ThresholdsConfig,
    Threshold,
    ThresholdsMode,
    FieldColorModeId,
    DashboardDashboardTemplating,
)
from grafana_foundation_sdk.models.common import TimeZoneUtc
import json


def get_datasource_config(datasource_config_file):
    """Get the datasource config from the config file"""
    with open(datasource_config_file, "r") as f:
        datasource_config = json.load(f)

    return {key: DataSourceRef(type_val=key, uid=value) for key, value in datasource_config.items()}


def build_dashboard(datasource_config_file):
    """Build the Home dashboard

    Note: Foundation SDK v11.6.0 limitations/differences from manual JSON:
    1. schemaVersion is 41 (Grafana 11.x) vs 40 (Grafana 10.x) - this is expected
    2. DataSourceRef does not support 'default' field - SDK limitation
    3. Panel always serializes 'repeatDirection: h' - SDK default behavior
    4. TimePicker always serializes default refresh_intervals - SDK default behavior
    """

    # load the datasources from the config file generated by terraform local_file resource
    datasource_config = get_datasource_config(datasource_config_file)

    dashboard = Dashboard("Home")
    dashboard.uid("ee4mze492j0n4d")
    dashboard.id(15)
    dashboard.tags([])
    dashboard.links([])
    dashboard.refresh("")
    dashboard.time("now-6h", "now")
    dashboard.timezone(TimeZoneUtc)
    dashboard.version(34)
    dashboard.week_start("")
    dashboard.timepicker(TimePicker().hidden(True))
    dashboard.preload(False)

    # TODO: check if we need this workaround or if we are fine with the default behavior
    # Fix templating to serialize as {list: []} instead of {}
    dashboard._internal.templating = DashboardDashboardTemplating(list_val=[])

    # Add annotations
    dashboard.annotation(
        AnnotationQuery()
        .name("Annotations & Alerts")
        .datasource(DataSourceRef(type_val="grafana", uid="-- Grafana --"))
        .enable(True)
        .hide(True)
        .icon_color("rgba(0, 211, 255, 1)")
        .type("dashboard")
        .built_in(1)
    )
    
    # TODO: should these files be loose in the src dir 
    # or grouped into a folder which gets skipped by the code 
    # that generates folders in grafana?
    with open("./src/Home.css", "r") as f:
        css = f.read()

    with open("./src/Home.html", "r") as f:
        html = f.read()

    # Add the main HTML panel
    dashboard.with_panel(
        Panel()
        .title("")
        .type("gapit-htmlgraphics-panel")
        .transparent(True)
        .datasource(
            datasource_config["grafana-postgresql-datasource"]
        )  # Note: DataSourceRef doesn't support 'default' field in SDK
        .plugin_version("2.1.1")
        .grid_pos(GridPos(h=19, w=24, x=0, y=0))
        .id(2)
        .options(
            {
                "SVGBaseFix": True,
                "add100Percentage": True,
                "calcsMutation": "none",
                "centerAlignContent": True,
                "codeData": json.dumps({ "text": ""} , indent=2),
                "css": css,
                "dynamicData": False,
                "dynamicFieldDisplayValues": False,
                "dynamicHtmlGraphics": False,
                "dynamicProps": False,
                "html": html,
                "onInit": "\n",
                "onInitOnResize": False,
                "onRender": "",
                "overflow": "visible",
                "panelupdateOnMount": False,
                "reduceOptions": {"calcs": []},
                "renderOnMount": False,
                "rootCSS": "",
                "useGrafanaScrollbar": True,
            }
        )
        .field_config(
            FieldConfigSource(
                defaults=FieldConfig(
                    color=FieldColor(mode=FieldColorModeId.THRESHOLDS),
                    mappings=[],
                    thresholds=ThresholdsConfig(
                        mode=ThresholdsMode.ABSOLUTE,
                        steps=[Threshold(value=None, color="green"), Threshold(value=80, color="red")],
                    ),
                ),
                overrides=[],
            )
        )
        .targets([])
    )

    return dashboard.build()
